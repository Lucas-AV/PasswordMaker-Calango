algoritmo passwordMaker;
// Síntese
//  Objetivo:	Criar um programa que gere senhas aleatórias
//  Entrada :	Quantidade de Senhas[inteiro], Tamanho das senhas[inteiro], confirmações[texto]
//  Saída   : 	As senhas criadas em formato de texto com o tamanho indicado pelo usuário


principal
	// Declarações
	inteiro qnt_senhas, tmn_senhas, n_carac_tipos;	// quantidade e tamanho das senhas
	texto confirmar;								// Variavel para confirmar solicitações no programa por meio do input de sim, SIM, s ou S
	inteiro carac_tot, i;							// Total de caracteres, contador
	texto caracteres[4];							// Lista contendo todos os tipos de caracteres [alfabeto, alfabeto maiúsculo, pontuacoes, numeros]
	
	// Instruções
	caracteres[0] = "abcdefghijklmnopqrstuvwxyz";
	caracteres[1] = maiusculo(caracteres[0]);
	caracteres[2] = "0123456789";
	caracteres[3] = "!#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~" + '"';
	
	
	// Calcular a soma do tamanho de todos os textos do vetor caracteres
	carac_tot = 0;
	para(i de 0 ate 3 passo 1) faca
		carac_tot = carac_tot + tamanhoTexto(caracteres[i]);
	fimPara
	
	// Loop do-while consante para continuar a execução enquanto o usuário não apertar ESC ou informe que não deseja continuar a execução na leitura que está contida na linha 66
	faca
		n_carac_tipos = 4;
		// Título de apresentação do programa durante a execução
		criarTitulo("Gerador de senhas","-=-",23);
		escreval("Lista de caracteres utilizados (96 caracteres no total)");
		escreval("- Alfabeto minúsculo (",tamanhoTexto(caracteres[0])," caracteres)");
		escreval("- Alfabeto maiúsculo (",tamanhoTexto(caracteres[1])," caracteres)");
		escreval("- Lista de números   (",tamanhoTexto(caracteres[2])," caracteres)");
		escreval("- Pontuações         (",tamanhoTexto(caracteres[3])," caracteres)");
		decorador("-=-",23);
		escreval("Avisos importantes:");
		escreval("- O tamamho e quantidade de senhas tem que ser maior que 0");
		escreval("- Você pode apertar ESC para sair do programa");
		decorador("-=-",23);
		
		// Input para manter os caracteres de pontuação
		escreval("Deseja manter os caracteres de pontuações nas senhas?");
		escreva("> ");
		leia(confirmar);
		se(comparaTexto(maiusculo(confirmar),"S") != 0 e comparaTexto(maiusculo(confirmar),"SIM") != 0) entao
			n_carac_tipos = n_carac_tipos - 1;
		fimSe
		
		// Input do tamanho das senhas
		escreval("Qual o tamanho de senha que você vai utilizar?");
		escreva("> ");
		leia(tmn_senhas);

		// Input do número de senhas que o programa vai gerar
		escreval("Quantas senhas você vai querer gerar?");
		escreva("> ");
		leia(qnt_senhas);
		decorador("-=-",23);
		
		// Procedimento para validar as entradas númericas
		se(tmn_senhas > 0 e qnt_senhas > 0) entao
			gerarSenhas(tmn_senhas,qnt_senhas,caracteres,n_carac_tipos);
		senao
			criarTitulo("ERRO! VALORES DE ENTRADA INVÁLIDOS","   ",23);
		fimSe

		// Pergunta ao usuário se ele deseja finalizar o programa
		decorador("-=-",23);
		escreval("Deseja continuar?");
		escreva("> ");
		leia(confirmar);
		
		// Saída normal sem que seja pressionado o ESC (Qualquer valor de entrada diferente de S ou SIM)
		se(comparaTexto(maiusculo(confirmar),"S") != 0 e comparaTexto(maiusculo(confirmar),"SIM") != 0) entao
			decorador("-=-",23);
			interrompa;
		// Continuação da execução do programa
		senao
			decorador("-=-",23);
			para(i de 1 ate 4 passo 1) faca
				escreval("");
			fimPara
		fimSe
	enquanto(verdadeiro);
fimPrincipal


// Procedimento criado para gerar senhas a partir da combinação de vários tipos de caracteres
procedimento gerarSenhas(inteiro tmn, inteiro qnt, texto caracteres[], inteiro n_tipos)
	caracter carac_aleatorio;
	texto vetor_escolhido;
	inteiro tmn_vetor;
	inteiro i, j;
	
	// Loop de criação de senhas
	i = 0;
	faca
		escreva("Senha n",i+1,": ");
		// Loop para escolha de caracter aleatório
		j = 0;
		faca
			vetor_escolhido = caracteres[aleatorio(n_tipos)];						// Seleciona um texto aleatório dentre os textos do vetor caracteres[]
			tmn_vetor = tamanhoTexto(vetor_escolhido);								// Recebe o tamanho total do texto escolhido
			carac_aleatorio = caracterTexto(vetor_escolhido, aleatorio(tmn_vetor));	// Escolhe um caracter aleatório dentre os que estão disponíveis no texto escolhido
			escreva(carac_aleatorio);
			j = j + 1;
		enquanto(j < tmn);
		i = i + 1;
		escreval("");
		
		// Deixa de escrever uma linha vazia extra seja a última vez que o loop vai ser executado
		se(i < qnt) entao
			escreval("");
		fimSe
	enquanto(i < qnt);
fimProcedimento


// Procedimento criado com a função de criar linhas de divisão ou decoração para tornar o código mais apresentável (Recomendação: Não ultrapassar o valor de 69 no input do tamanho)
procedimento decorador(texto decor, inteiro tamanho) // O tipo texto está sendo utilizado para que decoradores não fiquem limitados a um único caracter
	inteiro i;
	// Loop for para adicionar os caracteres de decoração
	para(i de 1 ate tamanho passo 1) faca
		escreva(decor);
	fimPara
	escreval("");
fimProcedimento

// Procedimento criado para gerar títulos centralizados
procedimento criarTitulo(texto titulo, texto decor, inteiro tamanho)
	// Declaração de contador e total de espaços vazios a serem adicionados a esquerda do texto
	inteiro i, espacos;
	
	// Calcular diferença entre o tamanho total do decorador e o tamanho do título divido por 2 para centralizar o texto com o decorador
	espacos = (tamanho * tamanhoTexto(decor))/2 - tamanhoTexto(titulo)/2;
	
	// Criação do título
	decorador(decor, tamanho);
	para(i de 1 ate espacos passo 1) faca
		escreva(" ");
	fimPara
	escreval(titulo);
	decorador(decor, tamanho);
fimProcedimento
